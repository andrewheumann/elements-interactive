#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

### Setup

#!csharp

#r "nuget: Hypar.Elements, *-*"
using Elements.Geometry.Solids;
var defaultMat = new Material("Default", "#dddddd");

Formatter.Register<SolidOperation>((solidOp, writer) => {
    var model = new Model();
    model.AddElement(new GeometricElement { Representation = solidOp, Material= defaultMat});
    var src = GetModelViewerSrc(model);
    writer.Write(src);

}, "text/html");
Formatter.Register<Representation>((representation, writer) => {
    var model = new Model();
    model.AddElement(new GeometricElement { Representation = representation, Material= defaultMat});
    var src = GetModelViewerSrc(model);
    writer.Write(src);

}, "text/html");
Formatter.Register<IEnumerable<SolidOperation>>((solidOps, writer) => {
    var model = new Model();
    foreach(var solidOp in solidOps) {
        model.AddElement(new GeometricElement { Representation = solidOp, Material= defaultMat});
    }
    var src = GetModelViewerSrc(model);
    writer.Write(src);

}, "text/html");

#!markdown

# Profiles and Solid Operations

#!markdown

## Profiles

Profiles are basically "Polygons with holes" â€” and they're a major geometry workhorse on Hypar. They're used to represent everything from the outlines of spaces, to building footprints, to the cross-sections of structural members.

#!csharp

var outerBoundary = Polygon.Rectangle((0,0), (10, 10));
var hole = Polygon.Rectangle((4,4), (8, 8));
var profile = new Profile(outerBoundary, hole);
return profile;

#!markdown

Profiles can have multiple holes, too:

#!csharp

var outerBoundary = Polygon.Rectangle((0,0), (10, 10));
var hole1 = Polygon.Rectangle((2,2), (4, 4));
var hole2 = Polygon.Rectangle((6,6), (8, 8));
var profile = new Profile(outerBoundary, new List<Polygon> { hole1, hole2 });
return profile;

#!markdown

## Solid Operations

We can also create solid geometry, not just curves. The two most common are the `Lamina`, which is basically a flat surface, and the `Extrude`, which is a straight extrusion along a vector. Both can be created from `Profile`s.

#!csharp

var lamina = new Lamina(profile);
return lamina;

#!csharp

var extrude = new Extrude(profile, 2, Vector3.ZAxis);
return extrude;

#!markdown

`Sweep`s are also supported:

#!csharp

using Elements.Geometry.Profiles;
var rail = new Polyline((0,0), (10,0), (10, 3), (12, 4));
var crossSection = new WideFlangeProfileFactory().GetProfileByType(WideFlangeProfileType.W24x94);
var sweep = new Sweep(crossSection, rail, 0, 0, 0, false);
return sweep;

#!markdown

## Representations

You can create a `Representation` out of multiple solid operations, for more complex geometry. Solid operations may be solid and void, so a representation can be a complex boolean:

#!csharp

var baseExtrude = new Extrude(Polygon.Ngon(6, 5), 6, new Vector3(0,0,1));
var void1 = new Extrude(Polygon.Ngon(4, 2), 7, Vector3.ZAxis, true);
var void2 = new Sweep(Polygon.Star(3, 2, 5), new Line((-5,0,3), (5, 0, 3)),0,0,0, true);
var representation = new Representation(new List<SolidOperation> { baseExtrude, void1, void2 });
return representation;

#!markdown

# Profile Operations
You can also perform useful 2D operations on profiles to create new Profiles. These include:
- `Profile.Offset`
- `Profile.Intersection`
- `Profile.UnionAll` 
- `Profile.Split`

among others. 

#!csharp

// Offset
var baseProfile = new Profile(Polygon.Star(10,6, 5));
var offsets = Profile.Offset(new [] {baseProfile}, 5);
return new List<Profile> { baseProfile }.Concat(offsets);

#!csharp

// Intersect
var p1 = new Profile(Polygon.Star(8,3, 5));
var p2 = new Profile(Polygon.Rectangle(2, 10));
var intersection = Profile.Intersection(new[] {p1}, new[] {p2});
// Use model curves to display with different colors
var curves = new List<ModelCurve>();
curves.AddRange(p1.ToModelCurves(null, BuiltInMaterials.XAxis));
curves.AddRange(p2.ToModelCurves(null, BuiltInMaterials.YAxis));
curves.AddRange(intersection.SelectMany((p) => p.ToModelCurves(null, BuiltInMaterials.ZAxis)));
return curves;

#!csharp

return Profile.UnionAll(new [] {p1, p2});

#!csharp

var splitLine1 = new Polyline((-10, 0), (0, 1), (10, 0));
var splitLine2 = new Polyline((0,-10), (3, 10));

var splits = Profile.Split(new [] {p1}, new Polyline[] {splitLine1, splitLine2});
var random = new Random(3);
return splits.Select(s => new Extrude(s, random.NextDouble() * 10, Vector3.ZAxis));

#!markdown

# Exercise

Create a profile with a hole, and create an extrude from it. Then, create a representation from the extrude. Consider adding an additional void operation to the represenation to subtract from the extrude. Finally, return the representation.
